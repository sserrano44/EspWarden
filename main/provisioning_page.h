#ifndef PROVISIONING_PAGE_H
#define PROVISIONING_PAGE_H

// HTML page for device provisioning
static const char provisioning_html[] =
"<!DOCTYPE html>"
"<html><head>"
"<title>ESP32 Remote Signer Setup</title>"
"<meta name='viewport' content='width=device-width,initial-scale=1'>"
"<style>"
"body{font-family:Arial,sans-serif;max-width:500px;margin:50px auto;padding:20px;background:#f5f5f5}"
".container{background:white;padding:30px;border-radius:10px;box-shadow:0 2px 10px rgba(0,0,0,0.1)}"
"h1{color:#2c3e50;text-align:center;margin-bottom:30px}"
".section{margin-bottom:25px;padding:20px;border:1px solid #ddd;border-radius:5px}"
".section h3{margin-top:0;color:#34495e}"
"input[type=text],input[type=password]{width:100%;padding:10px;margin:5px 0;border:1px solid #ddd;border-radius:4px;box-sizing:border-box}"
"button{background:#3498db;color:white;padding:12px 20px;border:none;border-radius:4px;cursor:pointer;width:100%;margin-top:10px}"
"button:hover{background:#2980b9}"
".status{padding:10px;margin:10px 0;border-radius:4px;display:none}"
".success{background:#d4edda;color:#155724;border:1px solid #c3e6cb}"
".error{background:#f8d7da;color:#721c24;border:1px solid #f5c6cb}"
"</style>"
"</head><body>"
"<div class='container'>"
"<h1>üîê ESP32 Remote Signer</h1>"
"<p>Configure your device for secure transaction signing</p>"

"<div class='section'>"
"<h3>1. WiFi Configuration</h3>"
"<form id='wifiForm'>"
"<input type='text' id='ssid' placeholder='WiFi Network Name (SSID)' required>"
"<input type='password' id='password' placeholder='WiFi Password' required>"
"<button type='submit'>Save WiFi Credentials</button>"
"</form>"
"<div id='wifiStatus' class='status'></div>"
"</div>"

"<div class='section'>"
"<h3>2. Authentication Key</h3>"
"<form id='authForm'>"
"<input type='password' id='authKey' placeholder='256-bit hex key (64 characters)' maxlength='64' required>"
"<small style='color:#666;font-size:12px'>Generate: <code>openssl rand -hex 32</code></small>"
"<button type='submit'>Set Auth Key</button>"
"</form>"
"<div id='authStatus' class='status'></div>"
"</div>"

"<div class='section'>"
"<h3>3. Generate Signing Key</h3>"
"<form id='keyForm'>"
"<button type='submit'>Generate New Key</button>"
"</form>"
"<div id='keyStatus' class='status'></div>"
"</div>"

"<div class='section'>"
"<h3>4. Transaction Policy</h3>"
"<form id='policyForm'>"
"<input type='text' id='chains' placeholder='Allowed chains (e.g., 1,10,8453)' required>"
"<input type='text' id='addresses' placeholder='Whitelisted addresses (comma separated)'>"
"<input type='text' id='maxValue' placeholder='Max value in wei (e.g., 100000000000000000)' required>"
"<button type='submit'>Set Policy</button>"
"</form>"
"<div id='policyStatus' class='status'></div>"
"</div>"

"<div class='section'>"
"<h3>5. Complete Setup</h3>"
"<p>After configuring all settings, remove the provisioning jumper and restart the device.</p>"
"<button onclick='reboot()'>Restart Device</button>"
"</div>"

"</div>"

"<script>"
"function showStatus(elementId, message, isError) {"
"  const el = document.getElementById(elementId);"
"  el.textContent = message;"
"  el.className = 'status ' + (isError ? 'error' : 'success');"
"  el.style.display = 'block';"
"}"

"async function submitForm(url, data, statusId) {"
"  try {"
"    const response = await fetch(url, {"
"      method: 'POST',"
"      headers: {'Content-Type': 'application/json'},"
"      body: JSON.stringify(data)"
"    });"
"    const result = await response.text();"
"    if (response.ok) {"
"      showStatus(statusId, 'Success!', false);"
"    } else {"
"      showStatus(statusId, 'Error: ' + result, true);"
"    }"
"  } catch (error) {"
"    showStatus(statusId, 'Error: ' + error.message, true);"
"  }"
"}"

"document.getElementById('wifiForm').onsubmit = function(e) {"
"  e.preventDefault();"
"  const data = {"
"    ssid: document.getElementById('ssid').value,"
"    password: document.getElementById('password').value"
"  };"
"  submitForm('/wifi', data, 'wifiStatus');"
"};"

"document.getElementById('authForm').onsubmit = function(e) {"
"  e.preventDefault();"
"  const key = document.getElementById('authKey').value;"
"  if (key.length !== 64 || !/^[0-9a-fA-F]+$/.test(key)) {"
"    showStatus('authStatus', 'Key must be 64 hex characters', true);"
"    return;"
"  }"
"  submitForm('/auth', {key: key}, 'authStatus');"
"};"

"document.getElementById('keyForm').onsubmit = function(e) {"
"  e.preventDefault();"
"  submitForm('/key', {mode: 'generate'}, 'keyStatus');"
"};"

"document.getElementById('policyForm').onsubmit = function(e) {"
"  e.preventDefault();"
"  const chains = document.getElementById('chains').value.split(',').map(x => parseInt(x.trim()));"
"  const addresses = document.getElementById('addresses').value.split(',').map(x => x.trim()).filter(x => x);"
"  const data = {"
"    allowedChains: chains,"
"    toWhitelist: addresses,"
"    maxValueWei: document.getElementById('maxValue').value"
"  };"
"  submitForm('/policy', data, 'policyStatus');"
"};"

"function reboot() {"
"  if (confirm('Restart the device? Make sure to remove the provisioning jumper first.')) {"
"    fetch('/reboot', {method: 'POST'});"
"  }"
"}"
"</script>"
"</body></html>";

#endif // PROVISIONING_PAGE_H